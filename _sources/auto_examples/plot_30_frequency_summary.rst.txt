.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_30_frequency_summary.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_30_frequency_summary.py:


.. _tut-fnirs-freq:

NIRS Frequency and Filter Commentary
====================================

In this example we discuss frequency and filters in the context
of NIRS analysis.
We examine the interplay between the expected brain response based
on experimental design and our model of how the brain reacts to stimuli:,
the actual data measured during an experiment, and the filtering
that is applied to the data.

.. contents:: Page contents
   :local:
   :depth: 2


.. code-block:: default


    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    import os
    import mne
    import numpy as np
    from mne_nirs.experimental_design import create_first_level_design_matrix









Import and preprocess data
--------------------------

This code is similar to the first sections in the MNE tutorial,
so will not be described in detail here.
We read in the data, annotate the triggers, remove the control condition,
convert to haemoglobin concentration. See
https://mne.tools/dev/auto_tutorials/preprocessing/plot_70_fnirs_processing.html#


.. code-block:: default


    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_raw_dir = os.path.join(fnirs_data_folder, 'Participant-1')
    raw_intensity = mne.io.read_raw_nirx(fnirs_raw_dir,
                                         verbose=True).load_data()
    new_des = [des for des in raw_intensity.annotations.description]
    new_des = ['Control' if x == "1.0" else x for x in new_des]
    new_des = ['Tapping/Left' if x == "2.0" else x for x in new_des]
    new_des = ['Tapping/Right' if x == "3.0" else x for x in new_des]
    annot = mne.Annotations(raw_intensity.annotations.onset,
                            raw_intensity.annotations.duration * 5., new_des)
    raw_intensity.set_annotations(annot)
    raw_intensity.annotations.crop(60, 2967)
    raw_intensity.annotations.delete(
        np.where([d == 'Control' for d in raw_intensity.annotations.description]))

    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading /github/home/mne_data/MNE-fNIRS-motor-data/Participant-1
    Reading 0 ... 23238  =      0.000 ...  2974.464 secs...




Extract expected HRF from data
------------------------------

First we extract the expected HRF function from
the data. See :ref:`_tut-fnirs-hrf` for more details on this analysis.


.. code-block:: default


    design_matrix = create_first_level_design_matrix(raw_haemo, drift_order=0)

    # This is a bit of a hack.
    # Overwrite the first NIRS channel with the expected response.
    # Rescale to be in expected units of uM.
    hrf = raw_haemo.copy().pick(picks=[0])
    hrf._data[0] = 1e-6 * (design_matrix['Tapping/Left'] +
                           design_matrix['Tapping/Right']).T

    fig = hrf.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                         color='r', show=False)





.. image:: /auto_examples/images/sphx_glr_plot_30_frequency_summary_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Effective window size : 262.144 (s)




Plot raw measured data
----------------------

Next we plot the PSD of the raw data.
Here we rescale the data to fit in the figure.

TODO: Find a nice way to show this data with correct scale, perhaps a left
y axis scale.


.. code-block:: default


    raw_haemo._data = raw_haemo._data * 1e-2

    fig = hrf.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                         color='r', show=False)
    raw_haemo.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                               ax=fig.axes, show=False)





.. image:: /auto_examples/images/sphx_glr_plot_30_frequency_summary_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Effective window size : 262.144 (s)
    Effective window size : 262.144 (s)

    <Figure size 640x480 with 1 Axes>



Plot epoched data
-----------------

Next we plot the PSD of the epoched data.


.. code-block:: default



    events, _ = mne.events_from_annotations(raw_haemo)
    event_dict = {'Tapping/Left': 1, 'Tapping/Right': 2}
    reject_criteria = dict(hbo=120e-6)
    tmin, tmax = -5, 15
    epochs = mne.Epochs(raw_haemo, events, event_id=event_dict,
                        tmin=tmin, tmax=tmax,
                        reject=reject_criteria, reject_by_annotation=True,
                        proj=True, baseline=(None, 0), preload=True,
                        detrend=None, verbose=True)


    fig = hrf.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                         color='r', show=False)
    raw_haemo.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                               ax=fig.axes, show=False)
    epochs.pick(picks='hbo').plot_psd(average=True, fmax=2, ax=fig.axes,
                                            show=False, color='g')





.. image:: /auto_examples/images/sphx_glr_plot_30_frequency_summary_003.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Tapping/Left', 'Tapping/Right']
    60 matching events found
    Applying baseline correction (mode: mean)
    Not setting metadata
    0 projection items activated
    Loading data for 60 events and 157 original time points ...
    0 bad epochs dropped
    Effective window size : 262.144 (s)
    Effective window size : 262.144 (s)
        Using multitaper spectrum estimation with 7 DPSS windows

    <Figure size 640x480 with 1 Axes>



Plot filter response
--------------------

Next we plot the filter response.


.. code-block:: default


    filter_params = mne.filter.create_filter(
        raw_haemo.get_data(), raw_haemo.info['sfreq'],
        l_freq=0.01, h_freq=0.4,
        h_trans_bandwidth=0.2, l_trans_bandwidth=0.005)


    fig = hrf.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                         color='r', show=False)
    raw_haemo.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                               ax=fig.axes, show=False)
    epochs.pick(picks='hbo').plot_psd(average=True, fmax=2, ax=fig.axes,
                                            show=False, color='g')
    mne.viz.plot_filter(filter_params, raw_haemo.info['sfreq'],
                              flim=(0.005, 2), fscale='log', gain=False,
                              plot='magnitude', axes=fig.axes, show=False)





.. image:: /auto_examples/images/sphx_glr_plot_30_frequency_summary_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Setting up band-pass filter from 0.01 - 0.4 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 0.01
    - Lower transition bandwidth: 0.01 Hz (-6 dB cutoff frequency: 0.01 Hz)
    - Upper passband edge: 0.40 Hz
    - Upper transition bandwidth: 0.20 Hz (-6 dB cutoff frequency: 0.50 Hz)
    - Filter length: 5157 samples (660.096 sec)

    Effective window size : 262.144 (s)
    Effective window size : 262.144 (s)
        Using multitaper spectrum estimation with 7 DPSS windows

    <Figure size 640x480 with 1 Axes>



Discussion
----------

Next we plot the filter response.


.. code-block:: default



    fig = hrf.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                         color='r', show=False)
    raw_haemo.pick(picks='hbo').plot_psd(average=True, fmax=2,
                                               ax=fig.axes, show=False)
    epochs.pick(picks='hbo').plot_psd(average=True, fmax=2, ax=fig.axes,
                                            show=False, color='g')
    mne.viz.plot_filter(filter_params, raw_haemo.info['sfreq'],
                              flim=(0.005, 2), fscale='log', gain=False,
                              plot='magnitude', axes=fig.axes, show=False)

    leg_lines = [line for line in fig.axes[0].lines if line.get_linestyle() == '-']
    fig.legend(leg_lines, ['Theoretical HRF', 'Measured Data',
                           'Epoched Data', 'Filter Response'])
    fig.axes[0].set_ylabel('Filter Magnitude (dB) [invalid for other lines]')
    fig.axes[0].set_title('')



.. image:: /auto_examples/images/sphx_glr_plot_30_frequency_summary_005.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Effective window size : 262.144 (s)
    Effective window size : 262.144 (s)
        Using multitaper spectrum estimation with 7 DPSS windows

    Text(0.5, 1.0, '')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.154 seconds)


.. _sphx_glr_download_auto_examples_plot_30_frequency_summary.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_30_frequency_summary.py <plot_30_frequency_summary.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_30_frequency_summary.ipynb <plot_30_frequency_summary.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
