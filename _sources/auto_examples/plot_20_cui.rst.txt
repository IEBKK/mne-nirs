.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_20_cui.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_20_cui.py:


.. _tut-fnirs-cui:

Signal enhancement techniques
=============================

In this document we investigate the effect of different signal enhancement
techniques on NIRS data.


.. warning::
      This is a work in progress. Suggestions of improvements are
      appreciated. I am finalising the code, then will fix the text.


.. contents:: Page contents
   :local:
   :depth: 2


.. code-block:: default



    # Authors: Robert Luke <mail@robertluke.net>
    #
    # License: BSD (3-clause)

    import os

    import matplotlib.pyplot as plt

    import mne
    import mne_nirs









Import and preprocess data
--------------------------

This code is exactly the same as the first sections in the MNE tutorial.
See
https://mne.tools/dev/auto_tutorials/preprocessing/plot_70_fnirs_processing.html
for more details.


.. code-block:: default


    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_raw_dir = os.path.join(fnirs_data_folder, 'Participant-1')
    raw_intensity = mne.io.read_raw_nirx(fnirs_raw_dir, verbose=True).load_data()
    picks = mne.pick_types(raw_intensity.info, meg=False, fnirs=True)
    dists = mne.preprocessing.nirs.source_detector_distances(
        raw_intensity.info, picks=picks)
    raw_intensity.pick(picks[dists > 0.01])
    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od)
    raw_haemo = raw_haemo.filter(0.05, 0.7, h_trans_bandwidth=0.2,
                                 l_trans_bandwidth=0.02)
    events, _ = mne.events_from_annotations(raw_haemo, event_id={'1.0': 1,
                                                                 '2.0': 2,
                                                                 '3.0': 3})
    event_dict = {'Control': 1, 'Tapping/Left': 2, 'Tapping/Right': 3}






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading /github/home/mne_data/MNE-fNIRS-motor-data/Participant-1
    Reading 0 ... 23238  =      0.000 ...  2974.464 secs...
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 0.05 - 0.7 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 0.05
    - Lower transition bandwidth: 0.02 Hz (-6 dB cutoff frequency: 0.04 Hz)
    - Upper passband edge: 0.70 Hz
    - Upper transition bandwidth: 0.20 Hz (-6 dB cutoff frequency: 0.80 Hz)
    - Filter length: 1289 samples (164.992 sec)

    Used Annotations descriptions: ['1.0', '2.0', '3.0']




Extract epochs with no additional processing
--------------------------------------------

First we extract the epochs with no additional processing,
this result should be the same as the MNE tutorial.


.. code-block:: default


    reject_criteria = dict(hbo=80e-6)
    tmin, tmax = -5, 15

    epochs = mne.Epochs(raw_haemo, events, event_id=event_dict,
                        tmin=tmin, tmax=tmax,
                        reject=reject_criteria, reject_by_annotation=True,
                        proj=True, baseline=(None, 0), preload=True,
                        detrend=None, verbose=True)

    evoked_dict = {'Tapping/HbO': epochs['Tapping'].average(picks='hbo'),
                   'Tapping/HbR': epochs['Tapping'].average(picks='hbr'),
                   'Control/HbO': epochs['Control'].average(picks='hbo'),
                   'Control/HbR': epochs['Control'].average(picks='hbr')}

    # Rename channels until the encoding of frequency in ch_name is fixed
    for condition in evoked_dict:
        evoked_dict[condition].rename_channels(lambda x: x[:-4])






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    90 matching events found
    Applying baseline correction (mode: mean)
    Not setting metadata
    0 projection items activated
    Loading data for 90 events and 157 original time points ...
        Rejecting  epoch based on HBO : ['S4_D4 hbo']
        Rejecting  epoch based on HBO : ['S4_D4 hbo', 'S8_D8 hbo']
        Rejecting  epoch based on HBO : ['S4_D4 hbo']
        Rejecting  epoch based on HBO : ['S4_D4 hbo', 'S8_D8 hbo']
        Rejecting  epoch based on HBO : ['S1_D1 hbo', 'S3_D3 hbo', 'S4_D4 hbo', 'S7_D6 hbo', 'S7_D7 hbo', 'S8_D8 hbo']
        Rejecting  epoch based on HBO : ['S4_D4 hbo', 'S6_D8 hbo', 'S8_D8 hbo']
    6 bad epochs dropped




Apply negative correlation enhancment algorithm
-----------------------------------------------

Apply Cui et. al. 2010 and extract epochs.


.. code-block:: default


    raw_anti = mne_nirs.signal_enhancement.enhance_negative_correlation(raw_haemo)

    epochs_anti = mne.Epochs(raw_anti, events, event_id=event_dict,
                             tmin=tmin, tmax=tmax,
                             reject=reject_criteria, reject_by_annotation=True,
                             proj=True, baseline=(None, 0), preload=True,
                             detrend=None, verbose=True)

    evoked_dict_anti = {'Tapping/HbO': epochs_anti['Tapping'].average(picks='hbo'),
                        'Tapping/HbR': epochs_anti['Tapping'].average(picks='hbr'),
                        'Control/HbO': epochs_anti['Control'].average(picks='hbo'),
                        'Control/HbR': epochs_anti['Control'].average(picks='hbr')}

    # Rename channels until the encoding of frequency in ch_name is fixed
    for condition in evoked_dict_anti:
        evoked_dict_anti[condition].rename_channels(lambda x: x[:-4])






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    90 matching events found
    Applying baseline correction (mode: mean)
    Not setting metadata
    0 projection items activated
    Loading data for 90 events and 157 original time points ...
    0 bad epochs dropped




Plot two approaches for comparison
----------------------------------

Plot the average epochs with and without Cui 2010 applied.


.. code-block:: default


    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))

    color_dict = dict(HbO='#AA3377', HbR='b')
    styles_dict = dict(Control=dict(linestyle='dashed'))

    mne.viz.plot_compare_evokeds(evoked_dict, combine="mean", ci=0.95,
                                 axes=axes[0], colors=color_dict,
                                 styles=styles_dict,
                                 ylim=dict(hbo=[-10, 13]))

    mne.viz.plot_compare_evokeds(evoked_dict_anti, combine="mean", ci=0.95,
                                 axes=axes[1], colors=color_dict,
                                 styles=styles_dict,
                                 ylim=dict(hbo=[-10, 13]))

    for column, condition in enumerate(['Original Data', 'Cui Enhanced Data']):
        axes[column].set_title('{}'.format(condition))



.. image:: /auto_examples/images/sphx_glr_plot_20_cui_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    combining channels using "mean"
    combining channels using "mean"
    combining channels using "mean"
    combining channels using "mean"
    combining channels using "mean"
    combining channels using "mean"
    combining channels using "mean"
    combining channels using "mean"





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.332 seconds)


.. _sphx_glr_download_auto_examples_plot_20_cui.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_20_cui.py <plot_20_cui.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_20_cui.ipynb <plot_20_cui.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
