.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_10_hrf.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_10_hrf.py:


.. _tut-fnirs-processing:

Haeomodynamic response analsys
==============================

This is a work in progress document.

This is a first attempt to add GLM analysis to MNE processing of NIRS data.

It is basically a wrapper over Nistats. https://nistats.github.io/

This is written quite poorly, read with caution.

Currently the analysis is only being run on the first third of the measurement
to meet github actions memory constraints. Either swtich to another CI with more memory
or solve this issue.

But this means the results are noiser than the MNE fnirs tutorial.

.. contents:: Page contents
   :local:
   :depth: 2


.. code-block:: default


    import os
    import matplotlib.pyplot as plt
    import mne
    import mne_nirs

    from mne_nirs.experimental_design import create_first_level_design_matrix, run_GLM, plot_GLM_topo









Import raw NIRS data
--------------------

Import the motor tapping data also used in MNE tutorial and crop to speed
up computation time.
See https://mne.tools/dev/auto_tutorials/preprocessing/plot_70_fnirs_processing.html for
epoching style analysis.


.. code-block:: default


    fnirs_data_folder = mne.datasets.fnirs_motor.data_path()
    fnirs_raw_dir = os.path.join(fnirs_data_folder, 'Participant-1')
    raw_intensity = mne.io.read_raw_nirx(fnirs_raw_dir,
                                         verbose=True).load_data()
    raw_intensity.crop(tmax=1400)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for fnirs_motor...
    Creating ~/mne_data
    Downloading archive MNE-fNIRS-motor-data.tgz to /github/home/mne_data
    Downloading https://files.osf.io/v1/resources/rxvq7/providers/osfstorage/5dbf84a9cfc96c000ec957eb?version=1&action=download&direct (17.1 MB)
      0%|          | Downloading : 0.00/17.1M [00:00<?,        ?B/s]      3%|2         | Downloading : 504k/17.1M [00:00<00:00,    24.9MB/s]      6%|5         | Downloading : 0.99M/17.1M [00:00<00:01,    10.8MB/s]      7%|7         | Downloading : 1.24M/17.1M [00:00<00:01,    14.2MB/s]     12%|#1        | Downloading : 1.99M/17.1M [00:00<00:00,    24.0MB/s]     18%|#7        | Downloading : 2.99M/17.1M [00:00<00:00,    28.1MB/s]     23%|##3       | Downloading : 3.99M/17.1M [00:00<00:00,    27.0MB/s]     29%|##9       | Downloading : 4.99M/17.1M [00:00<00:02,    5.38MB/s]     34%|###3      | Downloading : 5.74M/17.1M [00:00<00:03,    3.85MB/s]     38%|###8      | Downloading : 6.49M/17.1M [00:00<00:01,    8.62MB/s]     41%|####1     | Downloading : 6.99M/17.1M [00:00<00:00,    16.8MB/s]     47%|####6     | Downloading : 7.99M/17.1M [00:00<00:01,    5.26MB/s]     57%|#####7    | Downloading : 9.74M/17.1M [00:01<00:00,    17.7MB/s]     63%|######2   | Downloading : 10.7M/17.1M [00:01<00:01,    5.26MB/s]     72%|#######1  | Downloading : 12.2M/17.1M [00:01<00:00,    11.4MB/s]     78%|#######7  | Downloading : 13.2M/17.1M [00:01<00:00,    26.3MB/s]     84%|########3 | Downloading : 14.2M/17.1M [00:01<00:00,    35.0MB/s]     89%|########9 | Downloading : 15.2M/17.1M [00:01<00:00,    26.9MB/s]     92%|#########2| Downloading : 15.7M/17.1M [00:01<00:00,    31.9MB/s]    100%|##########| Downloading : 17.1M/17.1M [00:01<00:00,    39.3MB/s]    100%|##########| Downloading : 17.1M/17.1M [00:01<00:00,    11.9MB/s]
    Verifying hash c4935d19ddab35422a69f3326a01fef8.
    Decompressing the archive: /github/home/mne_data/MNE-fNIRS-motor-data.tgz
    (please be patient, this can take some time)
    Successfully extracted to: ['/github/home/mne_data/MNE-fNIRS-motor-data']
    Attempting to create new mne-python configuration file:
    /github/home/.mne/mne-python.json
    Loading /github/home/mne_data/MNE-fNIRS-motor-data/Participant-1
    Reading 0 ... 23238  =      0.000 ...  2974.464 secs...

    <RawNIRX | Participant-1, 56 x 10939 (1400.1 s), ~4.8 MB, data loaded>



Clean up annotations before analysis
------------------------------------

Here I update the annotation names and remove annotations that indicated
the experiment began and finished.


.. code-block:: default


    new_des = [des for des in raw_intensity.annotations.description];
    new_des = ['Control' if x == "1.0" else x for x in new_des]
    new_des = ['Tapping/Left' if x == "2.0" else x for x in new_des]
    new_des = ['Tapping/Right' if x == "3.0" else x for x in new_des]
    annot = mne.Annotations(raw_intensity.annotations.onset, raw_intensity.annotations.duration, new_des)
    raw_intensity.set_annotations(annot)
    raw_intensity.annotations.crop(35, 2967)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Annotations | 43 segments: Control (13), Tapping/Left (16), Tapping/Right ...>



Preprocess NIRS data
--------------------

Convert the raw data to haemoglobin concentration and bandpass filter.


.. code-block:: default



    picks = mne.pick_types(raw_intensity.info, meg=False, fnirs=True)

    dists = mne.preprocessing.nirs.source_detector_distances(
        raw_intensity.info, picks=picks)
    raw_intensity.pick(picks[dists > 0.01])
    raw_od = mne.preprocessing.nirs.optical_density(raw_intensity)
    raw_haemo = mne.preprocessing.nirs.beer_lambert_law(raw_od)
    raw_haemo = raw_haemo.filter(0.05, 0.7, h_trans_bandwidth=0.2,
                                 l_trans_bandwidth=0.02)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 0.05 - 0.7 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 0.05
    - Lower transition bandwidth: 0.02 Hz (-6 dB cutoff frequency: 0.04 Hz)
    - Upper passband edge: 0.70 Hz
    - Upper transition bandwidth: 0.20 Hz (-6 dB cutoff frequency: 0.80 Hz)
    - Filter length: 1289 samples (164.992 sec)





View experiment events
----------------------

First we view the experiment using MNEs plot events.


.. code-block:: default


    events, _ = mne.events_from_annotations(raw_haemo)
    event_dict = {'Control': 1, 'Tapping/Left': 2, 'Tapping/Right': 3}
    mne.viz.plot_events(events, event_id=event_dict,  sfreq=raw_haemo.info['sfreq'])




.. image:: /auto_examples/images/sphx_glr_plot_10_hrf_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Control', 'Tapping/Left', 'Tapping/Right']

    <Figure size 640x480 with 1 Axes>



Next we view the same information but displayed as a block design.


.. code-block:: default


    s = mne_nirs.experimental_design.create_boxcar(raw_haemo)
    fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(15, 6))
    plt.plot(raw_haemo.times, s, axes=axes)
    plt.legend(["Control", "Left", "Right"], loc="upper right")
    plt.xlabel("Time (s)")





.. image:: /auto_examples/images/sphx_glr_plot_10_hrf_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Control', 'Tapping/Left', 'Tapping/Right']

    Text(0.5, 0, 'Time (s)')



Create design matrix
--------------------

This analysis specifies the experiment using a design matrix which
is created and plotted below.
In this example we use the standard SPM haemodynamic response function and
include a first order polynomial drift.


.. code-block:: default


    design_matrix = create_first_level_design_matrix(raw_intensity,
                                                     hrf_model='spm', stim_dur=5.0,
                                                     drift_order=1,
                                                     drift_model='polynomial')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ../mne_nirs/experimental_design/_experimental_design.py:44: FutureWarning: 

     | Starting with Nilearn 0.7.0, all Nistats functionality has been incorporated into Nilearn's stats & reporting modules.
     | Nistats package will no longer be updated or maintained.

      from nistats.design_matrix import make_first_level_design_matrix




And we display a summary of the design matrix
using standard Nistats reporting functions.


.. code-block:: default


    from nistats.reporting import plot_design_matrix
    plot_design_matrix(design_matrix)





.. image:: /auto_examples/images/sphx_glr_plot_10_hrf_003.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.axes._subplots.AxesSubplot object at 0x7f661af952b0>



And we can also look at a single experimental condition.


.. code-block:: default


    s = mne_nirs.experimental_design.create_boxcar(raw_intensity)
    plt.plot(raw_intensity.times, s[:, 1])
    plt.plot(design_matrix['Tapping/Left'])
    plt.xlim(180, 300)
    plt.legend(["Stimulus", "Expected HRF"])
    plt.xlabel("Time (s)")
    plt.ylabel("Amplitude")






.. image:: /auto_examples/images/sphx_glr_plot_10_hrf_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Used Annotations descriptions: ['Control', 'Tapping/Left', 'Tapping/Right']

    Text(0, 0.5, 'Amplitude')



Fit GLM to estimate response
----------------------------

We run a GLM fit for the data and experiment matrix.
First we analyse just the first two channels which correspond HbO and HbR
of a single source detector pair.


.. code-block:: default


    labels, glm_estimates = run_GLM(raw_haemo.copy().pick(picks=range(2)),
                                    design_matrix)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/local/lib/python3.8/site-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.
      warnings.warn(msg, category=FutureWarning)




We then display the results. Note that the control condition sits around zero.
And that the HbO is positive and larger than the HbR, this is to be expected.
Further, we note that for this channel the response to tapping on the right hand
is larger than the left. And the values are similar to what is seen in
the epoching tutorial.


.. code-block:: default


    plt.scatter(design_matrix.columns[:3], glm_estimates[labels[0]].theta[:3] * 1e6)
    plt.scatter(design_matrix.columns[:3], glm_estimates[labels[1]].theta[:3] * 1e6)
    plt.xlabel("Experiment Condition")
    plt.ylabel("Haemoglobin (μM)")
    plt.legend(["Oxyhaemoglobin", "Deoxyhaemoglobin"])
    plt.hlines([0.0], 0, 2)
    plt.show()





.. image:: /auto_examples/images/sphx_glr_plot_10_hrf_005.png
    :class: sphx-glr-single-img





View GLM results for all sensors
--------------------------------

Lastly we run the GLM analysis on all sensors and plot the result on a toppmap.
We see the same result as in the MNE tutorial that activation is largest
contralateral to the tapping side. Also note that HbR tends to be the negative
of HbO as expected.


.. code-block:: default


    labels, glm_estimates = run_GLM(raw_haemo, design_matrix)
    plot_GLM_topo(raw_haemo, labels, glm_estimates, design_matrix,
                  requested_conditions=['Tapping/Left', 'Tapping/Right'])


.. image:: /auto_examples/images/sphx_glr_plot_10_hrf_006.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 1200x700 with 4 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  42.548 seconds)


.. _sphx_glr_download_auto_examples_plot_10_hrf.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_10_hrf.py <plot_10_hrf.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_10_hrf.ipynb <plot_10_hrf.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
